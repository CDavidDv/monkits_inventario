<?php
error_reporting(E_ALL);
ini_set('display_errors', 1);

echo "<h2>🔧 Fix Autoloader - Regenerar desde Web</h2>";

// Función para regenerar autoloader manualmente
function regenerateAutoloader() {
    $vendorDir = __DIR__ . '/vendor';
    $composerDir = $vendorDir . '/composer';
    
    // 1. Leer composer.json
    $composerJson = json_decode(file_get_contents(__DIR__ . '/composer.json'), true);
    if (!$composerJson) {
        throw new Exception("No se pudo leer composer.json");
    }
    
    // 2. Recrear autoload_psr4.php
    $psr4Content = "<?php\n\n// autoload_psr4.php @generated by Custom Fix\n\n\$vendorDir = dirname(dirname(__FILE__));\n\$baseDir = dirname(\$vendorDir);\n\nreturn array(\n";
    
    // PSR-4 namespaces principales
    $psr4Namespaces = [
        'Ramsey\\Uuid\\' => array('$vendorDir . \'/ramsey/uuid/src\''),
        'App\\' => array('$baseDir . \'/app\''),
        'Database\\Factories\\' => array('$baseDir . \'/database/factories\''),
        'Database\\Seeders\\' => array('$baseDir . \'/database/seeders\''),
        'Spatie\\Permission\\' => array('$vendorDir . \'/spatie/laravel-permission/src\''),
        'Laravel\\Jetstream\\' => array('$vendorDir . \'/laravel/jetstream/src\''),
        'Laravel\\Fortify\\' => array('$vendorDir . \'/laravel/fortify/src\''),
        'Laravel\\Sanctum\\' => array('$vendorDir . \'/laravel/sanctum/src\''),
        'Inertia\\' => array('$vendorDir . \'/inertiajs/inertia-laravel/src\''),
    ];
    
    foreach ($psr4Namespaces as $namespace => $paths) {
        $psr4Content .= "    '$namespace' => " . var_export($paths, true) . ",\n";
    }
    
    $psr4Content .= ");\n";
    
    file_put_contents($composerDir . '/autoload_psr4.php', $psr4Content);
    echo "<p>✅ autoload_psr4.php regenerado</p>";
    
    // 3. Recrear autoload_classmap.php (vacío para empezar)
    $classmapContent = "<?php\n\n// autoload_classmap.php @generated by Custom Fix\n\n\$vendorDir = dirname(dirname(__FILE__));\n\$baseDir = dirname(\$vendorDir);\n\nreturn array(\n);\n";
    file_put_contents($composerDir . '/autoload_classmap.php', $classmapContent);
    echo "<p>✅ autoload_classmap.php regenerado</p>";
    
    // 4. Recrear autoload_files.php con hashes únicos
    $filesContent = "<?php

// autoload_files.php @generated by Custom Fix

\$vendorDir = dirname(dirname(__FILE__));
\$baseDir = dirname(\$vendorDir);

return array(
    '" . md5('ramsey/uuid/src/functions.php') . "' => \$vendorDir . '/ramsey/uuid/src/functions.php',
);
";
    file_put_contents($composerDir . '/autoload_files.php', $filesContent);
    echo "<p>✅ autoload_files.php regenerado</p>";
    
    // 5. Recrear autoload_static.php con sintaxis correcta
    $hash = md5(time());
    $staticContent = "<?php

// autoload_static.php @generated by Custom Fix

namespace Composer\\Autoload;

class ComposerStaticInit{$hash}
{
    public static \$files = array (
    );

    public static \$prefixLengthsPsr4 = array (
        'R' => 
        array (
            'Ramsey\\\\Uuid\\\\' => 13,
        ),
        'A' => 
        array (
            'App\\\\' => 4,
        ),
    );

    public static \$prefixDirsPsr4 = array (
        'Ramsey\\\\Uuid\\\\' => 
        array (
            0 => __DIR__ . '/../ramsey/uuid/src',
        ),
        'App\\\\' => 
        array (
            0 => __DIR__ . '/../../app',
        ),
    );

    public static \$classMap = array (
    );

    public static function getInitializer(ClassLoader \$loader)
    {
        return \\Closure::fromCallable([__CLASS__, 'loadClassLoader']);
    }

    public static function loadClassLoader(\$loader)
    {
        // Empty implementation
    }
}
";
    file_put_contents($composerDir . '/autoload_static.php', $staticContent);
    echo "<p>✅ autoload_static.php regenerado</p>";
    
    // 6. Recrear autoload_real.php
    $realContent = "<?php

// autoload_real.php @generated by Custom Fix

namespace Composer\\Autoload;

class ComposerAutoloaderInit{$hash}
{
    public static function loadClassLoader(\$class)
    {
        if ('Composer\\\\Autoload\\\\ClassLoader' === \$class) {
            require __DIR__ . '/ClassLoader.php';
        }
    }

    public static function getLoader()
    {
        if (null !== self::\$loader) {
            return self::\$loader;
        }

        spl_autoload_register([__CLASS__, 'loadClassLoader'], true, true);
        self::\$loader = \$loader = new \\Composer\\Autoload\\ClassLoader();
        spl_autoload_unregister([__CLASS__, 'loadClassLoader']);

        \$vendorDir = dirname(__DIR__);
        \$baseDir = dirname(\$vendorDir);

        // PSR-4 autoloading
        \$loader->setPsr4('Ramsey\\\\Uuid\\\\', array(\$vendorDir . '/ramsey/uuid/src'));
        \$loader->setPsr4('App\\\\', array(\$baseDir . '/app'));
        \$loader->setPsr4('Database\\\\Factories\\\\', array(\$baseDir . '/database/factories'));
        \$loader->setPsr4('Database\\\\Seeders\\\\', array(\$baseDir . '/database/seeders'));

        \$loader->register(true);

        // Include files
        \$includeFiles = require __DIR__ . '/autoload_files.php';
        foreach (\$includeFiles as \$fileIdentifier => \$file) {
            if (empty(\$GLOBALS['__composer_autoload_files'][\$fileIdentifier])) {
                \$GLOBALS['__composer_autoload_files'][\$fileIdentifier] = true;
                require \$file;
            }
        }

        return \$loader;
    }

    private static \$loader;
}
";
    file_put_contents($composerDir . '/autoload_real.php', $realContent);
    echo "<p>✅ autoload_real.php regenerado</p>";
}

try {
    echo "<h3>🔄 Regenerando autoloader...</h3>";
    
    // Regenerar archivos
    regenerateAutoloader();
    
    echo "<h3>🧪 Probando...</h3>";
    
    // Limpiar cache de opcodes si existe
    if (function_exists('opcache_reset')) {
        opcache_reset();
        echo "<p>✅ OPcache limpiado</p>";
    }
    
    // Probar autoloader
    require_once __DIR__ . '/vendor/autoload.php';
    echo "<p>✅ Autoloader cargado</p>";
    
    // Probar UUID específicamente
    if (class_exists('Ramsey\\Uuid\\Uuid')) {
        $uuid = \Ramsey\Uuid\Uuid::uuid4();
        echo "<p>✅ UUID funciona: " . $uuid->toString() . "</p>";
    } else {
        echo "<p>❌ Clase UUID no encontrada</p>";
    }
    
    // Probar Laravel
    $app = require_once __DIR__ . '/bootstrap/app.php';
    echo "<p>✅ Laravel Bootstrap: OK</p>";
    
    echo "<h3>🎉 ¡AUTOLOADER REGENERADO EXITOSAMENTE!</h3>";
    echo "<p><a href='/inventario/' style='background:#10b981;color:white;padding:10px;text-decoration:none;border-radius:5px;'>🚀 Probar Aplicación</a></p>";
    
} catch (Exception $e) {
    echo "<p>❌ Error: " . $e->getMessage() . "</p>";
    echo "<p>Archivo: " . $e->getFile() . ":" . $e->getLine() . "</p>";
    echo "<pre>" . $e->getTraceAsString() . "</pre>";
}

echo "<hr>";
echo "<p><strong>🔧 Autoloader Fix por Claude Code</strong></p>";
echo "<p>📅 " . date('Y-m-d H:i:s') . "</p>";
?>